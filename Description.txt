Проект PolarProblems------------------------------------------------------------------------------------------
Авторы: Бычков Д.А., Торопов М.Е.

В этом проекте реализовано сравнение скорости ввода данных и поиска по строке в СУБД MySQL, MS SQL, SQLite и PolarDB, построение графиков зависимостей скорости ввода от количества добавляемых записей. В PolarDB используется бинарное дерево для построения индексов. 

Руководство по использованию проекта:
	
1) Интерфейс реализован средствами WPF. 

2) Для компиляции требуется:
	- в менеджере ссылок проекта указать ссылки на библиотеки: MySql.Data.dll, PolarDB.dll, System.Data.SQLite.dll
	Они находятся в папках Common\DLLs и Common\DLLs64

3) Описание классов:
	- WorkMain - основной класс, в котором описаны методы для загрузки и поиска данных .
	- MySQL, SQLdatabase, SQLite - классы, содержащие методы для создания соответствующих БД, создания индексов, методы поиска и добавления данных.
	- TestDataGenerator - класс, генерирующий тестовые данные для заполнения таблиц в БД
	- BinaryTreeIndex - класс бинарного дерева, содержащего индексы (офсеты) опорной таблицы

4) Папка "Results" содержит результаты выполнения программы - графики, построенные в MS Office Excel

5) В случае неудачного завершения программы требуется произвести очистку папки "Databases" (в проекте автоматическое удаление пока работает некорректно)

Планы на будущее:
1)Добавить методы аналогичные GetFirst и GetAll для всех БД
2)Сделать корректное закрытие БД и удаление
3)Накопить результаты вычисления параметров исследования и произвести их анализ
4)Сделать генерацию строки поиска и соответственно произвести измерение средней скорости поиска.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Проект TestPolarBtree--------------------------
Авторы: Бычков Д.А., Торопов М.Е.

В этом проекте идет работа над созданием B-дерева, узлы которого содержат индексы (офсеты) на опорную таблицу PolarDB. 
1) Структура дерева:
	"node"		- узел
	"NumKeys" 	- количество ключей
	"Keys" 		- массив ключей от t-1 до 2t-1 в каждом узле, в корне от 1 до 2t-1
	"IsLeaf"	- является ли узел листом
	"Childs" 	- дочерние узлы
2) Описание классов:			 
	- BTree - класс, содержащий описание структуры дерева и методы: 
	- MainTestBTree - основной класс, в котором инициализируется дерево и используются методы по работе. 
	
3) Аварийные ситуации:	

Что нужно сделать:
1) Добавление в заполненный узел: создание нового узла при разбиении	
2) Определить, как осуществлять переход к потомкам узла
3) Реализовать "правильную" вставку нового ключа с сохранением порядка
4) Научиться получать элементы последовательностей (Keys, Childs) по частям
5) Реализовать поиск элемента в дереве (см. пункт 2)	

*) Произвести измерение скорости работы с БД, используя B-дерево

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////